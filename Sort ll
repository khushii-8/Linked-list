#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

// Function to get length of linked list
int getLength(Node* head) {
    int len = 0;
    while (head != NULL) {
        len++;
        head = head->next;
    }
    return len;
}

// Bubble Sort on linked list
void bubbleSort(Node* head) {
    if (head == NULL) return;

    int n = getLength(head);

    for (int i = 0; i < n - 1; i++) {
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;

        while (curr != NULL && curr->next != NULL) {
            next = curr->next;

            if (curr->data > next->data) {
                // Swap nodes
                if (prev == NULL) {  
                    // Swapping head node
                    curr->next = next->next;
                    next->next = curr;
                    head = next;
                } else {
                    prev->next = next;
                    curr->next = next->next;
                    next->next = curr;
                }

                prev = next;
            } else {
                prev = curr;
                curr = curr->next;
            }
        }
    }
}

// Print linked list
void printList(Node* head) {
    while (head != NULL) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    // Example unsorted list: 4 -> 2 -> 1 -> 3
    Node* head = new Node(4);
    head->next = new Node(2);
    head->next->next = new Node(1);
    head->next->next->next = new Node(3);

    cout << "Original list: ";
    printList(head);

    bubbleSort(head);

    cout << "Sorted list: ";
    printList(head);

    return 0;
}
