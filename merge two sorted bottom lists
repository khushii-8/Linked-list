#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node* bottom;
    Node(int x) {
        data = x;
        next = NULL;
        bottom = NULL;
    }
};

// Function to merge two sorted bottom lists
Node* merge(Node* list1, Node* list2) {
    // Dummy node to start the merged list
    Node* dummy = new Node(0);
    Node* temp = dummy;

    // Compare and link nodes one by one
    while (list1 != NULL && list2 != NULL) {
        if (list1->data < list2->data) {
            temp->bottom = list1;
            list1 = list1->bottom;
        } else {
            temp->bottom = list2;
            list2 = list2->bottom;
        }
        temp = temp->bottom;
    }

    // Attach remaining nodes
    if (list1 != NULL) temp->bottom = list1;
    else temp->bottom = list2;

    // Return merged list (skip dummy node)
    return dummy->bottom;
}

// Function to flatten the list
Node* flatten(Node* root) {
    if (root == NULL || root->next == NULL) {
        return root;
    }

    // Flatten the rest of the list first
    root->next = flatten(root->next);

    // Merge current list with the flattened next list
    root = merge(root, root->next);

    return root;
}

// Function to print flattened list
void printList(Node* node) {
    while (node != NULL) {
        cout << node->data << " ";
        node = node->bottom;
    }
    cout << endl;
}

int main() {


    Node* head = new Node(5);
    head->bottom = new Node(7);
    head->bottom->bottom = new Node(8);
    head->bottom->bottom->bottom = new Node(30);

    head->next = new Node(10);
    head->next->bottom = new Node(20);

    head->next->next = new Node(19);
    head->next->next->bottom = new Node(22);
    head->next->next->bottom->bottom = new Node(50);

    head->next->next->next = new Node(28);
    head->next->next->next->bottom = new Node(35);
    head->next->next->next->bottom->bottom = new Node(40);
    head->next->next->next->bottom->bottom->bottom = new Node(45);

    Node* result = flatten(head);
    printList(result);

    return 0;
}
