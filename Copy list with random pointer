#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* random;
    Node(int x) {
        data = x;
        next = NULL;
        random = NULL;
    }
};

// Function to clone the list
Node* cloneList(Node* head) {
    if (!head) return NULL;

    Node* curr = head;

    // 1️⃣ Step 1: Insert cloned nodes just after originals
    while (curr) {
        Node* newNode = new Node(curr->data);
        newNode->next = curr->next;
        curr->next = newNode;
        curr = newNode->next;
    }

    // 2️⃣ Step 2: Set random pointers for cloned nodes
    curr = head;
    while (curr) {
        if (curr->random)
            curr->next->random = curr->random->next;
        curr = curr->next->next; // move to next original node
    }

    // 3️⃣ Step 3: Separate original and cloned lists
    curr = head;
    Node* cloneHead = head->next;
    Node* cloneCurr = cloneHead;

    while (curr) {
        curr->next = curr->next->next; // restore original list
        if (cloneCurr->next)
            cloneCurr->next = cloneCurr->next->next; // link clone nodes
        curr = curr->next;
        cloneCurr = cloneCurr->next;
    }

    return cloneHead;
}

// Function to print list (data + random->data)
void printList(Node* head) {
    while (head) {
        cout << "Data: " << head->data << ", ";
        if (head->random)
            cout << "Random: " << head->random->data;
        else
            cout << "Random: NULL";
        cout << endl;
        head = head->next;
    }
}

int main() {
    // Example list
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);

    // Random pointers
    head->random = head->next->next;      // 1 -> 3
    head->next->random = head;            // 2 -> 1
    head->next->next->random = head->next; // 3 -> 2

    cout << "Original list:\n";
    printList(head);

    Node* clonedHead = cloneList(head);

    cout << "\nCloned list:\n";
    printList(clonedHead);

    return 0;
}
