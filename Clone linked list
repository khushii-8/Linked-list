#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

// Function to print linked list
void printList(Node* head) {
    while (head != NULL) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

// Find the middle of linked list
Node* getMiddle(Node* head) {
    if (head == NULL) return head;

    Node* slow = head;
    Node* fast = head->next;

    while (fast != NULL && fast->next != NULL) {
        slow = slow->next;
        fast = fast->next->next;
    }

    return slow;
}

// Merge two sorted lists
Node* merge(Node* left, Node* right) {
    Node* dummy = new Node(0);
    Node* tail = dummy;

    while (left != NULL && right != NULL) {
        if (left->data < right->data) {
            tail->next = left;
            left = left->next;
        } else {
            tail->next = right;
            right = right->next;
        }
        tail = tail->next;
    }

    if (left != NULL) tail->next = left;
    else tail->next = right;

    return dummy->next;
}

// Merge sort for linked list
Node* mergeSort(Node* head) {
    if (head == NULL || head->next == NULL) {
        return head;
    }

    // Step 1: Split list into two halves
    Node* middle = getMiddle(head);
    Node* nextToMiddle = middle->next;
    middle->next = NULL;

    // Step 2: Sort each half
    Node* left = mergeSort(head);
    Node* right = mergeSort(nextToMiddle);

    // Step 3: Merge sorted halves
    return merge(left, right);
}

int main() {
    // Example: unsorted list -> 4 -> 2 -> 1 -> 3
    Node* head = new Node(4);
    head->next = new Node(2);
    head->next->next = new Node(1);
    head->next->next->next = new Node(3);

    cout << "Original list: ";
    printList(head);

    head = mergeSort(head);

    cout << "Sorted list: ";
    printList(head);

    return 0;
}
