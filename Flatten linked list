#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* bottom;
    Node(int x) { data = x; next = bottom = NULL; }
};

// Merge two sorted bottom lists (iterative)
Node* merge(Node* a, Node* b) {
    Node dummy(0);  // dummy node to simplify merge
    Node* tail = &dummy;

    while (a && b) {
        if (a->data < b->data) {
            tail->bottom = a;
            a = a->bottom;
        } else {
            tail->bottom = b;
            b = b->bottom;
        }
        tail = tail->bottom;
    }

    if (a) tail->bottom = a;
    if (b) tail->bottom = b;

    return dummy.bottom;
}

// Flatten the linked list
Node* flatten(Node* head) {
    if (!head) return NULL;

    Node* flat = head;        // start with first list
    Node* curr = head->next;  // rest of lists

    while (curr) {
        flat = merge(flat, curr);
        curr = curr->next;
    }

    return flat;
}

// Print flattened list
void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->bottom;
    }
    cout << endl;
}

int main() {
    // Example multi-level list
    Node* head = new Node(5);
    head->bottom = new Node(7);
    head->bottom->bottom = new Node(8);
    head->bottom->bottom->bottom = new Node(30);

    head->next = new Node(10);
    head->next->bottom = new Node(20);

    head->next->next = new Node(19);
    head->next->next->bottom = new Node(22);
    head->next->next->bottom->bottom = new Node(50);

    head->next->next->next = new Node(28);
    head->next->next->next->bottom = new Node(35);
    head->next->next->next->bottom->bottom = new Node(40);
    head->next->next->next->bottom->bottom->bottom = new Node(45);

    Node* flatHead = flatten(head);
    printList(flatHead);

    return 0;
}
