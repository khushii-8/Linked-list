#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* prev;
    Node* next;
    Node(int val) {
        data = val;
        prev = nullptr;
        next = nullptr;
    }
};

// Function to insert node at the end
void insertEnd(Node*& head, int data) {
    Node* newNode = new Node(data);
    if (!head) {
        head = newNode;
        return;
    }
    Node* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = newNode;
    newNode->prev = temp;
}

// Function to delete all occurrences of a key
void deleteAllOccurrences(Node*& head, int key) {
    Node* curr = head;

    while (curr) {
        if (curr->data == key) {
            Node* toDelete = curr;

            // If node is head
            if (curr == head) {
                head = curr->next;
                if (head) head->prev = nullptr;
            }
            else {
                curr->prev->next = curr->next;
                if (curr->next) {
                    curr->next->prev = curr->prev;
                }
            }

            curr = curr->next;
            delete toDelete;
        }
        else {
            curr = curr->next;
        }
    }
}

// Function to print DLL
void printList(Node* head) {
    Node* temp = head;
    while (temp) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

// Driver code
int main() {
    Node* head = nullptr;

    // Insert elements
    insertEnd(head, 10);
    insertEnd(head, 20);
    insertEnd(head, 30);
    insertEnd(head, 20);
    insertEnd(head, 40);
    insertEnd(head, 20);

    cout << "Original List: ";
    printList(head);

    int key = 20;
    deleteAllOccurrences(head, key);

    cout << "After deleting " << key << ": ";
    printList(head);

    return 0;
}
